//DO NOT EDIT THIS FILE
var moment = require('moment-timezone')

module.exports.AuditEvent = class {
  constructor (data, options) {
    if (!data) throw new Error('No data Passed')
    if (data.type !== 'audit_events') throw new Error('Not an Audit Event passed.\n' + JSON.stringify(data))
    if (!data.attributes) throw new Error('No Attributes Data passed.')
    const attributes = data.attributes
    let auditEventType
    if (attributes &&
        attributes.type_of &&
        Object.getPrototypeOf(attributes.type_of) === String.prototype) {
      auditEventType = attributes.type_of.split('.')
    } else { throw new Error('Audit Event Type not passed.\n' + JSON.stringify(attributes)) }
    this.componentType = auditEventType[0]
    this.eventType = auditEventType[1]
    this.userName = attributes.attributed_to_display_name
    this.userEmail = attributes.attributed_to_email
    this.componentName = attributes.display_name
    this.when = new Date(attributes.updated_at)
    if (data.meta && data.meta.property_name) {
      this.propertyName = data.meta.property_name
    }
    this.eventDetails = new LaunchEvent(attributes.entity)
    this.attributes = attributes
    this.raw = data
    if (options && options.tz) {
      this.when = moment(this.when).tz(options.tz)
    }
    if (data.relationships && data.relationships.property && data.relationships.property.data && data.relationships.property.data.id) { this.propertyId = data.relationships.property.data.id }
    if(options.poweredBy)this.poweredBy=options.poweredBy
    this.who={ email: this.userEmail, name: this.userName }
  }

  get componentType () { return this._componentType }
  set componentType (val) { if (COMPONENT_TYPES[val.toUpperCase()]) this._componentType = val }

  get eventType () { return this._eventType }
  set eventType (val) { if (EVENT_TYPES[val.toUpperCase()]) this._eventType = val }

  get about () {
    return {
      componentType: this.componentType,
      componentName: this.componentName,
      propertyName: this.propertyName,
      eventType: this.eventType,
      when: this.when,
      who: { name: this.userName, email: this.userEmail },
      eventDetails: this.eventDetails,
      poweredBy:this.poweredBy
    }
  }
}

const COMPONENT_TYPES = {
  PROPERTY: 'property',
  EXTENSION: 'extension',
  DATA_ELEMENT: 'data_element',
  RULE: 'rule',
  RULE_COMPONENT: 'rule_component',
  LIBRARY: 'library',
  BUILD: 'build',
  ENVIRONMENT: 'environment',
  HOST: 'host'
}

const EVENT_TYPES = {
  CREATED: 'created',
  UPDATED: 'updated',
  DELETED: 'deleted'
}

module.exports.LaunchEvent =class {
  constructor (data) {
    if (!data) throw new Error('No data Passed.')
    if (Object.getPrototypeOf(data) === String.prototype) {
      data = JSON.parse(data)
    }
    data = data.data
    if (!data.attributes) throw new Error('Attributes not found in event.\n' + JSON.stringify(data))
    this.componentName = data.attributes.name
    this.when = new Date(data.attributes.updated_at)
    this.attributes = data.attributes
    this.raw = data
  }
}
